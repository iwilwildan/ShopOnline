@implements IDisposable

@inject IShoppingCartService shoppingCartService
@inject IUserService userService
@inject NavigationManager navigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Modern Online Shop</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="fas fa-home" aria-hidden="true"></span>&nbsp;Home
            </NavLink>
        </div>
        <ProductCategoriesNavMenu />

        <div class="nav-item px-3 d-sm-none">
            <NavLink class="nav-link" href="ShoppingCart">
                <span class="fas fa-shopping-cart" aria-hidden="true"></span> Shopping Cart
                <span class="badge bg-dark">@shoppingCartItemCount</span>
            </NavLink>
        </div>
        <li class="dropdown-divider"></li>
        <div class="nav-item px-3">
            <AuthorizeView>
                <NotAuthorized>
                    <NavLink class="nav-link" href="signin">
                        <span class="fas fa-right-to-bracket" aria-hidden="true"></span> Sign In
                    </NavLink>
                </NotAuthorized>
                <Authorized>
                    <NavLink class="nav-link" @onclick="SignOut" style="cursor: pointer">
                        <span class="fas fa-right-from-bracket" aria-hidden="true"></span> Sign Out
                    </NavLink>
                </Authorized>
            </AuthorizeView>

        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private int shoppingCartItemCount = 0;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override void OnInitialized()
    {
        shoppingCartService.OnShoppingCartChanged += ShoppingCartChanged;
    }
    protected void ShoppingCartChanged(int totalQty)
    {
        shoppingCartItemCount = totalQty;
        StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        shoppingCartService.OnShoppingCartChanged -= ShoppingCartChanged;

    }
    void SignOut()
    {
        userService.SignOut();
        navigationManager.NavigateTo("/", true);
    }
}
